<?php

/*
 * This file is part of the sfArrayCachePlugin package.
 * (c) 2007 Stephen Riesenberg <sjohnr@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 *
 * sfArrayCache class.
 *
 * A cache class that stores arrays and hashes directly to file for fast retrieval.
 *
 * @package     sfArrayCachePlugin
 * @author      Stephen Riesenberg <sjohnr@gmail.com>
 * @version     SVN: $Id$
 */
class sfArrayCache extends sfFileCache
{
	/**
	 * Constructor.
	 *
	 * @param string The cache root directory
	 */
	public function __construct($cacheDir = null)
	{
		$this->setSuffix('.php');

		parent::__construct($cacheDir);
	}
	
	/**
	 * Saves some data in a cache file.
	 *
	 * This function handles generating the cached php code for the array.
	 *
	 * @param string The cache id
	 * @param string The name of the cache namespace
	 * @param array The array to put in cache
	 *
	 * @return boolean true if no problem
	 *
	 * @see sfCache
	 */
	public function set($id, $namespace = self::DEFAULT_NAMESPACE, $array)
	{
		$data = array();
		
		$data[] = '<?php';
		$data[] = '// auto-generated by sfArrayCache';
		$data[] = '// date: ' . date('Y-m-d H:i:s');
		$data[] = '';

		$data[] = 'return ' . var_export($array, true) . ';';

		return parent::set($id, $namespace, implode("\n", $data));
	}

	/**
	 * Reads the cache file and returns the content.
	 *
	 * This function returns the results of executing a php file generated by the set function.
	 *
	 * @param string The file path
	 * @param string The file name
	 *
	 * @return array The content of the cache file.
	 */
	protected function read($path, $file)
	{
		$fp = @fopen($path.$file, "rb");
		if ($this->fileLocking)
		{
			@flock($fp, LOCK_SH);
		}
		
		// execute the php file and return the results
		$data = include($path.$file);
		
		if ($this->fileLocking)
		{
			@flock($fp, LOCK_UN);
		}
		@fclose($fp);
		
		return $data;
	}
}